{"code":"import { __awaiter } from \"tslib\";\nimport { input, select } from '@inquirer/prompts';\nimport { clone } from '../utils/clone';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { version, name } from '../../package.json';\nimport axios from 'axios';\nexport const templates = new Map([\n    ['vite-Vue3-TypeScirpt-Template', {\n            name: 'vite-Vue3-TypeScirpt-Template',\n            downloadUrl: 'git@gitee.com:sohucw/admin-pro.git',\n            description: 'vue3技术栈开发 ',\n            branch: 'dev11'\n        }],\n    ['vite-Temp', {\n            name: 'vite-Vue3-TypeScirpt-Template',\n            downloadUrl: 'https://gitee.com/zhang-saimeng/zhang-cli.git',\n            description: 'vue3技术栈开发 ',\n            branch: 'master'\n        }]\n]);\nexport function isOverwrite(fileName) {\n    console.warn(`${fileName}文件夹已存在`);\n    return select({\n        message: '是否覆盖？',\n        choices: [\n            { name: '覆盖', value: true },\n            { name: '取消', value: false }\n        ]\n    });\n}\n// 获取npm包信息\nexport const getNpmInfo = (name) => __awaiter(void 0, void 0, void 0, function* () {\n    const npmUrl = `https://registry.npmjs.org/${name}`;\n    let res = {};\n    try {\n        res = yield axios.get(npmUrl);\n    }\n    catch (error) {\n        console.error(error);\n    }\n    return res;\n});\n// 获取npm最新版本\nexport const getNpmLatestVersion = (name) => __awaiter(void 0, void 0, void 0, function* () {\n    const { data } = (yield getNpmInfo(name));\n    console.info(data);\n});\n// 检查版本\nexport const checkVersion = (name, version) => __awaiter(void 0, void 0, void 0, function* () {\n    const latestVersion = yield getNpmLatestVersion(name);\n});\nexport function create(projectName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        //初始化模板列表\n        const templateList = Array.from(templates).map((item) => {\n            const [name, info] = item;\n            return {\n                name,\n                description: info.description,\n                value: name\n            };\n        });\n        if (!projectName) {\n            projectName = yield input({ message: '请输入项目名称：' });\n        }\n        const filePath = path.resolve(process.cwd(), projectName);\n        if (fs.existsSync(filePath)) {\n            const run = yield isOverwrite(projectName);\n            if (run) {\n                yield fs.remove(filePath); //删除重复的文件夹\n            }\n            else {\n                return;\n            }\n        }\n        yield checkVersion(name, version);\n        const templateName = yield select({\n            message: '请选择模板：',\n            choices: templateList\n        });\n        const info = templates.get(templateName);\n        if (info) {\n            clone(info.downloadUrl, projectName, ['-b', info.branch]);\n        }\n    });\n}\n","references":["C:/Users/张赛孟/Desktop/auto-cli/node_modules/.pnpm/@inquirer+prompts@7.2.3_@types+node@22.10.7/node_modules/@inquirer/prompts/dist/commonjs/index.d.ts","C:/Users/张赛孟/Desktop/auto-cli/src/utils/clone.ts","C:/Users/张赛孟/Desktop/auto-cli/node_modules/.pnpm/@types+fs-extra@11.0.4/node_modules/@types/fs-extra/index.d.ts","C:/Users/张赛孟/Desktop/auto-cli/package.json","C:/Users/张赛孟/Desktop/auto-cli/node_modules/.pnpm/axios@1.7.9/node_modules/axios/index.d.ts"]}
